%% Help
%% 

scenario = 'Rapid Scan image reconstruction';

groups{1} = get_group('Data load parameters', 'fbp');
groups{2} = get_group('Projection deconvolution', 'ppr');
groups{3} = get_group('Reconstruction parameters', 'rec');
groups{4} = get_group('Fitting parameters', 'fit');
groups{5} = get_group('Processing parameters', 'prc');

fields_FBP{1} = get_input_fields('Image string','image', 'SB14T13G14S1P3Z-1O0N0', 'S');

fields_PPR{1} = get_input_fields('Deconvolve', 'deconvolve', 'no', 'IDXS');
fields_PPR{end}.Show = {'Yes', 'No'};
fields_PPR{end}.Options = {'yes', 'no'};
fields_PPR{end+1} = get_input_fields('Launch GUI', 'launch_GUI', 'no', 'IDXS');
fields_PPR{end}.Show = {'Yes', 'No'};
fields_PPR{end}.Options = {'yes', 'no'};
fields_PPR{end+1} = get_input_fields('Function', 'function', 'Gaussian', 'IDXS');
fields_PPR{end}.Show = {'Gaussian', 'Fermi'};
fields_PPR{end}.Options = {'Gaussian', 'Fermi'};
fields_PPR{end+1} = get_input_fields('Gaussian fwhh','fwhh', 15, 'D');
fields_PPR{end+1} = get_input_fields('Fermi radius','radius', 20, 'D');
fields_PPR{end+1} = get_input_fields('Fermi roll','roll', 8, 'D');
fields_PPR{end+1} = get_input_fields('Offset','offset', 8, 'D');


fields_REC{1} = get_input_fields('Matrix size (space)', 'nBins', 64, 'D');
fields_REC{end+1} = get_input_fields('Matrix size (field)', 'nBinsField', 64, 'D');
fields_REC{end+1} = get_input_fields('FOV/sqrt(2) [cm]', 'size', 3.0, 'D');
fields_REC{end+1} = get_input_fields('Matrix center', 'center', '[0,0,0]', 'D');
fields_REC{end+1} = get_input_fields('Field FOV [G]', 'span', 3.0, 'D');
fields_REC{end+1} = get_input_fields('InterpFactor', 'InterpFactor', 4, 'D');
fields_REC{end+1} = get_input_fields('Filter', 'Filter', 'ram-lak', 'IDXS');
fields_REC{end}.Show = {'ram-lak', 'shepp-logan','butterworth'};
fields_REC{end}.Options = {'ram-lak', 'shepp-logan','butterworth'};
fields_REC{end+1} = get_input_fields('Interpolation', 'Interpolation', 'spline', 'S');
fields_REC{end+1} = get_input_fields('FilterCutOff', 'FilterCutOff', 0.5, 'D');
fields_REC{end+1} = get_input_fields('Code', 'CodeFlag', 'MATLAB', 'IDXS');
fields_REC{end}.Show = {'MATLAB', 'Mark (4D)'};
fields_REC{end}.Options = {'MATLAB', 'MARK4Dv1'};

fields_FIT{1} = get_input_fields('Spin probe', 'spin_probe', 'OX063H', 'IDXS');
fields_FIT{end}.Show = {'OX063H', 'OX063D24','Lorentzian','Voigtian (fix gauss)'};
fields_FIT{end}.Options = {'OX063H', 'OX063D24','Lorentzian','Voigtian'};
fields_FIT{end+1} = get_input_fields('Use data from tau', 'use_echos', [], 'D');
fields_FIT{end+1} = get_input_fields('Mask', 'fit_mask', 'threshold_mask', 'IDXS');
fields_FIT{end}.Show = {'Threshold', 'External file'};
fields_FIT{end}.Options = {'threshold_mask', 'external_file'};
fields_FIT{end+1} = get_input_fields('External mask file', 'fit_mask_file', 'ffff', 'F');
fields_FIT{end}.Flags = hex2dec('0');
fields_FIT{end+1} = get_input_fields('Mask threshold (0-1)', 'fit_mask_threshold', 0.1, 'D');

stage_show = {'None', 'Fill holes in the mask', 'Leave only objects larger than N', 'Raise threshold'};
stage_opt  = {'proc_none', 'proc_fill', 'proc_leave_large', 'proc_adaptive_threshold'};
fields_FIT{end+1} = get_input_fields('Mask processing stage 1', 'mask_proc_stage1', 'proc_none', 'IDXS');
fields_FIT{end}.Show = stage_show;
fields_FIT{end}.Options = stage_opt;
fields_FIT{end+1} = get_input_fields('Mask processing stage 2', 'mask_proc_stage2', 'proc_none', 'IDXS');
fields_FIT{end}.Show = stage_show;
fields_FIT{end}.Options = stage_opt;
fields_FIT{end+1} = get_input_fields('Mask processing stage 3', 'mask_proc_stage3', 'proc_none', 'IDXS');
fields_FIT{end}.Show = stage_show;
fields_FIT{end}.Options = stage_opt;
fields_FIT{end+1} = get_input_fields('Mask processing stage 4', 'mask_proc_stage4', 'proc_none', 'IDXS');
fields_FIT{end}.Show = stage_show;
fields_FIT{end}.Options = stage_opt;
fields_FIT{end+1} = get_input_fields('Fill holes in the mask', 'fit_mask_fill', '0', 'D');
fields_FIT{end+1} = get_input_fields('Leave only objects larger than N', 'fit_mask_object_size', '0', 'D');
fields_FIT{end+1} = get_input_fields('Maximum voxels in the mask', 'fit_mask_max_voxels', '6000', 'D');

fields_FIT{end+1} = get_input_fields('Consider fit errors as bad voxels', 'fit_errors_kill', 'yes', 'IDXS');
fields_FIT{end}.Show = {'Yes', 'No'};
fields_FIT{end}.Options = {'yes', 'no'};
fields_FIT{end+1} = get_input_fields('Fitting method', 'fit_method', 'Method1', 'IDXS');
fields_FIT{end}.Show = {'Default', 'Lookup general'};
fields_FIT{end}.Options = {'default', 'lookup_general'};
fields_FIT{end+1} = get_input_fields('Line width min-max [G]', 'fit_LW_min_max', '[0.2,0.8]', 'D');
fields_FIT{end+1} = get_input_fields('Offset min-max [G]', 'fit_x0_min_max', '[-0.2,0.2]', 'D');
fields_FIT{end+1} = get_input_fields('Phase min-max [deg]', 'fit_ph_min_max', '[-10, 10]', 'D');
fields_FIT{end+1} = get_input_fields('Amplitude min-max [deg]', 'fit_amp_min_max', '[0, 10]', 'D');
fields_FIT{end+1} = get_input_fields('Gaussian line width [G]', 'fit_gauss_LW', '0.5', 'D');

fields_PRC{1} = get_input_fields('Processing type', 'process_method', 'ese_fbp', 'IDXS');
fields_PRC{end}.Show = {'JEOL CW'};
fields_PRC{end}.Options = {'nakagawa_fbp'};
fields_PRC{end+1} = get_input_fields('Reconstruct data', 'recon_data', 'yes', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};
fields_PRC{end+1} = get_input_fields('Save data', 'save_data', 'yes', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};
fields_PRC{end+1} = get_input_fields('Fit data', 'fit_data', 'no', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};
fields_PRC{end+1} = get_input_fields('Show viewer', 'launch_viewer', 'no', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};
fields_PRC{end+1} = get_input_fields('Export projections', 'export_prj', 'no', 'IDXS');
fields_PRC{end}.Show = {'Raw', 'No'};
fields_PRC{end}.Options = {'raw', 'no'};

